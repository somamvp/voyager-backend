plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'java'
}

group = 'somaMVP'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	asciidoctorExtensions // dependencies 에서 적용한 것 추가
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.11' // Swagger
	implementation 'org.springframework.boot:spring-boot-starter-webflux:2.7.3' // WebFlux
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // JPA
	implementation 'com.google.code.gson:gson:2.9.0' // Gson
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3' // Jackson
	implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.6' // MariaDB
	implementation 'org.hibernate:hibernate-spatial:5.6.9.Final' // hibernate 버전 맞춤
	implementation 'mysql:mysql-connector-java' // MySQL
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.0' // P6Spy
	implementation 'net.logstash.logback:logstash-logback-encoder:7.2' // Logstash
	implementation 'org.springframework.boot:spring-boot-starter-data-redis:2.7.3' // Redis
	implementation 'org.springframework.session:spring-session-data-redis:2.7.0' // Redis Session
	implementation 'org.locationtech.jts:jts-core:1.19.0'
	compileOnly 'org.projectlombok:lombok'
	compileOnly("org.springframework.boot:spring-boot-devtools")

//	runtimeOnly 'com.h2database:h2' // H2 DB

	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
}
ext {
	// 아래서 사용할 변수 선언
	snippetsDir = file('build/generated-snippets')
}


test {
	// 위에서 작성한 snippetsDir 디렉토리를 test의 output으로 구성하는 설정 -> 스니펫 조각들이 build/generated-snippets로 출력
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor { // asciidoctor 작업 구성
	dependsOn test // test 작업 이후에 작동하도록 하는 설정
	configurations 'asciidoctorExtensions' // 위에서 작성한 configuration 적용
	inputs.dir snippetsDir // snippetsDir 를 입력으로 구성

	// source가 없으면 .adoc파일을 전부 html로 만들어버림
	// source 지정시 특정 adoc만 HTML로 만든다.
	sources{
		include("**/index.adoc","**/common/*.adoc")
	}

	// 특정 .adoc에 다른 adoc 파일을 가져와서(include) 사용하고 싶을 경우 경로를 baseDir로 맞춰주는 설정입니다.
	// 개별 adoc으로 운영한다면 필요 없는 옵션입니다.
	baseDirFollowsSourceFile()
}

// static/docs 폴더 비우기
asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

// asccidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy
task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

// build 의 의존작업 명시
build {
	dependsOn copyDocument
}


bootJar {	//(7) bootJar 시 asciidoctor 종속되고 build하위 스니펫츠 파일을 classes 하위로 복사
	dependsOn asciidoctor
	copy {
		from "${asciidoctor.outputDir}"
		into 'BOOT-INF/classes/static/docs'
	}
}