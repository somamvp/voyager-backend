# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

# Repo Action 페이지에 나타날 이름
name: Spring Boot & Gradle CI/CD

# Event Trigger
# devolop branch에 push 또는 pull request가 발생할 경우 동작
# branch 단위 외에도, tag나 cron 식 등을 사용할 수 있음
on:
  push:
    branches: [ CI/CD ]
  pull_request:
    branches: [ CI/CD ]

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    # Task의 sequence를 명시한다.
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Build
      - name: Build with Gradle
        #run: ./gradlew clean build
        run: ./gradlew build

      # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        run: mkdir deploy

      # Jar 파일 Copy
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy/

      # appspec.yml Copy
      - name: Copy appspec
        run: cp ./appspec.yml ./deploy/

      # script file Copy
      #- name: Copy shell
        #run: cp ./scripts/* ./deploy/

      # 압축파일 형태로 전달
      - name: Make zip file
        run: zip -r -qq -j ./deploy_s3.zip ./deploy/

      # S3 Bucket으로 copy
      - name: Deliver to AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp \
          --region ap-northeast-2 \
          --acl private \
          ./deploy_s3.zip s3://mvp-voyager-s3/

      # Deploy
      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws deploy create-deployment \
          --application-name voyager-backend-deploy \
          --deployment-group-name mvp \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=deploy_s3,bundleType=zip,key=deploy_s3.zip \
          --region ap-northeast-2
      - name: Git Repo Sync
        env: # Retrieve env variable from GiGHub secrets
          gitlab_url: ${{ secrets.TARGET_URL }}
          gitlab_username: ${{ secrets.TARGET_USERNAME }}
          gitlab_token: ${{ secrets.TARGET_TOKEN }}
        run: | # 토큰을 조합해서 저렇게 URL을 만들면 비번없이 push가 됩니다.
          git remote add gitlab https://${gitlab_username}:${gitlab_token}@${gitlab_url#https://};
      - name: Force push everthing
        run: | # 모든 브랜치와 태그에 대하여 push합니다. gitlab에서 보호설정이 걸려있으면 Fail할 수 있습니다.
          git push -f --all gitlab;
          git push -f --tags gitlab;